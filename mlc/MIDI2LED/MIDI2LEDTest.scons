#!python

import os

base_env = Environment()
if ARGUMENTS.get('VERBOSE') != '1':
    base_env['CCCOMSTR'] = 'Compiling $TARGET'
    base_env['LINKCOMSTR'] = 'Linking $TARGET'

# First build Google Test itself
gtest_env = base_env.Clone()

gtest_path = os.path.join('ExternalComponents', 'googletest', 'googletest')
gtest_include_path = os.path.join(gtest_path, 'include')

gtest_env['CPPPATH'] = [
    gtest_path,
    gtest_include_path,
]
gtest_env['CXXFLAGS'] = [
    '-pthread',
]

gtest_all = gtest_env.Object('gtest-all.o', os.path.join(gtest_path, 'src', 'gtest-all.cc'))
gtest_main = gtest_env.Object('gtest_main.o', os.path.join(gtest_path, 'src', 'gtest_main.cc'))
libgtest = gtest_env.StaticLibrary('libgtest.a', [gtest_all, gtest_main])

# Build and run tests
component_paths_with_test = [
    'Common',
]

test_env = base_env.Clone()
test_env['CPPPATH'] = [
    gtest_include_path,
]
test_env['LIBPATH'] = [
    '.',
]
test_env['LIBS'] = [
    'gtest'
]
test_env['CFLAGS'] = [
    '-std=gnu99',
]

for path in component_paths_with_test:
    test_name = path + 'Test'
    sources = Glob(os.path.join(path, '*.c')) + Glob(os.path.join(path, 'UnitTests', '*.cpp'))
    test_program = test_env.Program(test_name, sources)
    test_result = test_env.Command(test_name + '_result.xml', test_program, './$SOURCE --gtest_output=xml:$TARGET')
    test_env.AlwaysBuild(test_result)
