#!/usr/bin/env python

"""Generate version header file for MIDI2LED application"""

import subprocess
import re
import argparse
import sys
import os

_parser = argparse.ArgumentParser(
    description=__doc__,
    formatter_class=argparse.ArgumentDefaultsHelpFormatter
)


_output_format = """/* THIS FILE WAS GENERATED BY {script_name} */
#ifndef {guard_name}
#define {guard_name}

#define VERSION_MAJOR {major}
#define VERSION_MINOR {minor}
#define VERSION_COMMITS_PAST_TAG {commits_past_tag}
#define VERSION_COMMIT_ID "{commit_id}"

#ifdef Debug
#define VERSION_STRING "{git_describe}-DEBUG"
#else
#define VERSION_STRING "{git_describe}"
#endif

#endif /* {guard_name} */
"""


def main(argv):
    _parser.add_argument('-o', help='output path', default='version.h',
                         metavar='PATH')

    args = _parser.parse_args(argv)

    # Glob pattern ensures that only tags which start with 'v[some digit]'
    # are used
    git_describe = subprocess.check_output(
        ['git', 'describe', '--match', 'v[0-9]*', '--long'],
        text=True,
    ).rstrip()
    print(f"Git desribed current state as: {git_describe}")

    match = re.match(
        'v([0-9]+)\.([0-9]+)-([0-9]+)-(g[a-fA-F0-9]+)',
        git_describe)

    assert match
    major = match.group(1)
    minor = match.group(2)
    commits_past_tag = match.group(3)
    commit_id = match.group(4)

    output_name = os.path.basename(args.o)
    guard_name = output_name.upper().replace('.', '_') + '_'
    script_name = __file__

    output = _output_format.format(**locals())

    f = open(args.o, 'w')
    f.write(output)
    f.close()

    return 0


if __name__ == '__main__':
    sys.exit(main(sys.argv[1:]))
